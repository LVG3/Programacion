 package players;

import application.Board;
import application.Move;

public class JugadorLaura implements Player {

	
	public Move move(Board board) {
	   
		Move mov = jugada(board);
		if (mov!=null) return mov;
		
		return null;
	}

	static Move jugada(Board board) {
		
		int[] posicionfichaFinal;
		
		// Aqui busca la ficha mas alejada
		for (int i = 16; i >= 0; i--)
		{
			for (int j = 16; j >= 0; j--) 
			{
				if (board.get_cell_color(i, j) == 1) 
				{
					// Cuando encuentra la mas lejana valida si tiene espacios en la parte interior.
					posicionfichaFinal = posicion_infeior_libre(i,j,board);
					
					if(posicionfichaFinal != null)
					{	// Si sí tiene espacios en la parte inferior le asigna la ficha encontrada
						return new Move(i, j, posicionfichaFinal[0], posicionfichaFinal[1]);
					}
				}
			}
		}
		
		return null;
	}
	
	
	//Retorna una arreglo de dos valores: la fila y la columna (en ese orden) de una casilla
	//adyacente inferior a la casilla (f, c) que no se encuentre ocupada por otra pieza ni pertenezca a 
	//una casa distinta a su destino. En caso de existir más de una casilla libre, cualquiera
	//de estas casillas es aceptada. En caso de no existir ninguna casilla libre, debe retornar null.
	static int[] posicion_infeior_libre(int f, int c, Board board) {
		
		for(int k=f+1; k==(f+1); k++)
		{
			for(int l=c-1; l<=(c+1); l++)
			{
				if (board.get_cell_color(k, l) == 0)
				{
					int[] retornar = {k, l};
					return retornar;
				}
			}
		}
		
		return null;
	}

	
}
